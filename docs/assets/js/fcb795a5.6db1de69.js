"use strict";(self.webpackChunkotoroshi_biscuit_studio_documentation=self.webpackChunkotoroshi_biscuit_studio_documentation||[]).push([[903],{844:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"plugins/user-to-biscuit","title":"User to Biscuit Token Plugin","description":"This plugin enables seamless authentication by extracting the user identity from the request context, generating a Biscuit Token, and injecting it into the request as a valid authentication token.","source":"@site/docs/plugins/user-to-biscuit.mdx","sourceDirName":"plugins","slug":"/plugins/user-to-biscuit","permalink":"/otoroshi-biscuit-studio/docs/plugins/user-to-biscuit","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Biscuit User Extractor plugin","permalink":"/otoroshi-biscuit-studio/docs/plugins/biscuit-user-extractor copy"},"next":{"title":"API Documentation","permalink":"/otoroshi-biscuit-studio/docs/api"}}');var s=i(74848),r=i(28453);i(16438);const o={sidebar_position:6},a="User to Biscuit Token Plugin",c={},d=[{value:"How It Works",id:"how-it-works",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Configuration Example",id:"configuration-example",level:3},{value:"Configuration Parameters",id:"configuration-parameters",level:3},{value:"Usage",id:"usage",level:2}];function l(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"user-to-biscuit-token-plugin",children:"User to Biscuit Token Plugin"})}),"\n",(0,s.jsx)(t.p,{children:"This plugin enables seamless authentication by extracting the user identity from the request context, generating a Biscuit Token, and injecting it into the request as a valid authentication token."}),"\n",(0,s.jsx)(t.h2,{id:"how-it-works",children:"How It Works"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"User Extraction"}),": The plugin retrieves the user information from the request header or other specified sources."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Biscuit Token Generation"}),": Using the extracted user data, the plugin forges a Biscuit Token."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Request Augmentation"}),": The generated Biscuit Token is inserted into the request."]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsx)(t.p,{children:"The plugin requires a minimal configuration to function properly. Below is a sample configuration:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'{\n  "forge_ref": "YOUR_FORGE_ID",    // The reference to your Biscuit Forge ID used for signing tokens.\n  "extractor_header_name": "header",   // The name of the request header that contains the user identity (e.g., "Authorization").\n  "auto_facts": true                    // Boolean flag indicating whether additional facts should be automatically included in the token.\n}\n'})}),"\n",(0,s.jsx)(t.h3,{id:"configuration-example",children:"Configuration Example"}),"\n",(0,s.jsx)(t.p,{children:"A practical configuration example is as follows:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'{\n  "forge_ref": "biscuit-forge_be34f21f-14fd-4fa0-acc0-0a07b4233393",\n  "extractor_header_name": "user-token",\n  "auto_facts": true\n}\n'})}),"\n",(0,s.jsx)(t.h3,{id:"configuration-parameters",children:"Configuration Parameters"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Parameter"}),(0,s.jsx)(t.th,{children:"Type"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"forge_ref"})}),(0,s.jsx)(t.td,{children:"String"}),(0,s.jsx)(t.td,{children:"Unique reference to the Biscuit Forge responsible for signing and issuing tokens."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"extractor_header_name"})}),(0,s.jsx)(t.td,{children:"String"}),(0,s.jsx)(t.td,{children:"The header name from which the user identity is extracted."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"auto_facts"})}),(0,s.jsx)(t.td,{children:"Boolean"}),(0,s.jsxs)(t.td,{children:["If set to ",(0,s.jsx)(t.code,{children:"true"}),", additional user-related facts will be automatically embedded into the generated Biscuit Token."]})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:"Configure the plugin as per the above specifications."}),"\n",(0,s.jsx)(t.li,{children:"Ensure the appropriate request headers include user identity data."}),"\n",(0,s.jsx)(t.li,{children:"Upon receiving a request, the plugin will extract the user, generate a Biscuit Token, and insert it into the request."}),"\n",(0,s.jsx)(t.li,{children:"The authenticated request is sent to the destination service."}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},16438:(e,t,i)=>{i(96540),i(74848)},28453:(e,t,i)=>{i.d(t,{R:()=>o,x:()=>a});var n=i(96540);const s={},r=n.createContext(s);function o(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);